(time (let [triangle (fn [n] (/ (* n (+ n 1)) 2))
	    square (fn [n] (* n n))
	    pentagon (fn [n] (/ (* n (- (* 3 n) 1)) 2))
	    hexagon (fn [n] (* n (- (* 2 n) 1)))
	    heptagon (fn [n] (/ (* n (- (* 5 n) 3)) 2))
	    octagon (fn [n] (* n (- (* 3 n) 2)))
	    triangle-numbers (set (take-while #(< (count (str %)) 5)
					      (drop-while #(< (count (str %)) 4)
							  (map triangle (range 1 Double/POSITIVE_INFINITY)))))
	    square-numbers (set (take-while #(< (count (str %)) 5)
					    (drop-while #(< (count (str %)) 4)
							(map square (range 1 Double/POSITIVE_INFINITY)))))
	    pentagon-numbers (set (take-while #(< (count (str %)) 5)
					      (drop-while #(< (count (str %)) 4)
							  (map pentagon (range 1 Double/POSITIVE_INFINITY)))))
	    hexagon-numbers (set (take-while #(< (count (str %)) 5)
					     (drop-while #(< (count (str %)) 4)
							 (map hexagon (range 1 Double/POSITIVE_INFINITY)))))
	    heptagon-numbers (set (take-while #(< (count (str %)) 5)
					      (drop-while #(< (count (str %)) 4)
							  (map heptagon (range 1 Double/POSITIVE_INFINITY)))))
	    octagon-numbers (set (take-while #(< (count (str %)) 5)
					     (drop-while #(< (count (str %)) 4)
							 (map octagon (range 1 Double/POSITIVE_INFINITY)))))
	    numbers #{triangle-numbers square-numbers pentagon-numbers hexagon-numbers heptagon-numbers octagon-numbers}]
	(reduce + (first (for [numbers-one numbers
			       number-one numbers-one
			       numbers-two (disj numbers numbers-one)
			       number-two (filter #(= (mod number-one 100) (int (/ % 100)))
						  (difference numbers-two numbers-one))
			       numbers-three (disj numbers numbers-one numbers-two)
			       number-three (filter #(= (mod number-two 100) (int (/ % 100)))
						    (difference numbers-three numbers-two numbers-one))
			       numbers-four (disj numbers numbers-one numbers-two numbers-three)
			       number-four (filter #(= (mod number-three 100) (int (/ % 100)))
						   (difference numbers-four numbers-three numbers-two numbers-one))
			       numbers-five (disj numbers numbers-one numbers-two numbers-three numbers-four)
			       number-five (filter #(= (mod number-four 100) (int (/ % 100)))
						   (difference numbers-five numbers-four numbers-three numbers-two numbers-one))
			       numbers-six (disj numbers numbers-one numbers-two numbers-three numbers-four numbers-five)
			       number-six (filter #(= (mod number-five 100) (int (/ % 100)))
						  (difference numbers-six numbers-five numbers-four numbers-three numbers-two numbers-one))
			       :when (= (mod number-six 100) (int (/ number-one 100)))]
			   #{number-one number-two number-three number-four number-five number-six})))))